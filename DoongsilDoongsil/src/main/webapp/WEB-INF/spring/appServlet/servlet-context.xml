<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
	<annotation-driven/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- << 리소스명 설정 >> -->
	<resources mapping="/stc/jq/**" location="/resources/jquery/" />
	<resources mapping="/stc/css/**" location="/resources/css/" />
	<resources mapping="/stc/js/**" location="/resources/js/" />
	<resources mapping="/stc/img/**" location="/resources/staticimg/" />
	<resources mapping="/stc/up/**" location="/resources/upload/" />
	<!-- 
	upload 폴더는 일단은 만들어두긴 했는데 multipartResolver가 절대경로로 업로드를 안하면 오류가 많이 나서..
	저 폴더 못쓸수도 있어요...업로드 만드는 사람들 다들 화이팅..
	-->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="doongsil.com.web" />
	
	<!-- 트랜잭션 설정 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- << DB설정 후 변경 >>외부 구성 파일 로드 -->
	<context:property-placeholder location="classpath:/oracle/doongsil_connection.prop" />
	
	<!-- << DB설정 후 변경 >>데이터 베이스 연결을 위한 구성정보를 가지는 DataSource 객체 생성 -->
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></beans:property>
		<beans:property name="url" value="${url}"></beans:property>
		<beans:property name="username" value="${user1}"></beans:property>
		<beans:property name="password" value="${password}"></beans:property>
	</beans:bean>
	
	<!-- mybatis와 연결하여 mybatis로 DB 연결 세션 factory 생성 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
		<beans:property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></beans:property>
		<beans:property name="mapperLocations" value="classpath:/mybatis/mappers/*.xml"></beans:property>
	</beans:bean>
	
	<!-- mybatis DB 세션 factory로부터 연결 세션 생성 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"></beans:constructor-arg>
	</beans:bean>
	
	<!-- multipartResolver, 파일 업로드 사이즈 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
  		<!-- 최대 업로드 사이즈(전체 총합): 1024 * 1024 * 30 bytes = 30MB -->
		<beans:property name="maxUploadSize" value="31457280"></beans:property>
		<!-- 최대 업로드 사이즈(전체 총합): 1024 * 1024 * 10 bytes = 10MB -->
		<beans:property name="maxUploadSizePerFile" value="10485760"></beans:property>
  		<beans:property name="defaultEncoding" value="utf-8"></beans:property>
	</beans:bean>
	
	<!-- TransactionManager -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>
	
	 <tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- Weaving at Runtime -->
	<aop:aspectj-autoproxy />
	
	<!-- 인터셉터 예시
	<interceptors>
		<interceptor>
			<mapping path="/board/*" />
			<exclude-mapping path="/board/detail" />
			<beans:bean class="doongsil.com.web.interceptor.LoginCheckInterceptor"></beans:bean>
		</interceptor>
	 -->
	 <interceptors>
	 	<interceptor>
	 		<mapping path="/info"/>
	 		<beans:bean class="doongsil.com.web.info.interceptor.InfoInterceptor"></beans:bean>
	 	</interceptor>
	 	<interceptor>
	 		<mapping path="/infoUpdate"/>
	 		<beans:bean class="doongsil.com.web.info.interceptor.InfoUpdateInterceptor"></beans:bean>
	 	</interceptor>
	 </interceptors>
	
	<!-- 소셜 로그인 Oauth 관련 - 1. 네이버 -->
	<beans:bean id="naverClientID" class="java.lang.String">
		<beans:constructor-arg value="_5NfPBl9ABiRICfq2Uds" />
	</beans:bean>
	<beans:bean id="naverClientSecret" class="java.lang.String">
		<beans:constructor-arg value="a7Ei8kKSZt" />
	</beans:bean>
	<beans:bean id="naverRedirectUrl" class="java.lang.String">
		<beans:constructor-arg value="http://localhost:8080/login/ouath2/naver/callback" />
	</beans:bean>

	<beans:bean id="naverSns" class="doongsil.com.web.account.oauth2.SnsValue">
		<beans:constructor-arg value="naver" />
		<beans:constructor-arg ref="naverClientID" />
		<beans:constructor-arg ref="naverClientSecret" />
		<beans:constructor-arg ref="naverRedirectUrl" />
	</beans:bean>
	
	<!-- 소셜 로그인 Oauth 관련 - 3. 카카오 -->
	<beans:bean id="kakaoClientID" class="java.lang.String">
		<beans:constructor-arg value="d6cbcb45ce2bd0de56f95ef51e764ec7" />
	</beans:bean>
	<beans:bean id="kakaoClientSecret" class="java.lang.String">
		<beans:constructor-arg value="vpqr07m6lPpwxrW0mrz4P626NlfnwDMI" />
	</beans:bean>
	<beans:bean id="kakaoRedirectUrl" class="java.lang.String">
		<beans:constructor-arg value="http://localhost:8080/login/ouath2/kakao/callback" />
	</beans:bean>

	<beans:bean id="kakaoSns" class="doongsil.com.web.account.oauth2.SnsValue">
		<beans:constructor-arg value="kakao" />
		<beans:constructor-arg ref="kakaoClientID" />
		<beans:constructor-arg ref="kakaoClientSecret" />
		<beans:constructor-arg ref="kakaoRedirectUrl" />
	</beans:bean>
	
	<!-- 소셜 로그인 Oauth 관련 - 2. 구글 -->
	<beans:bean id="googleClientID" class="java.lang.String">
		<beans:constructor-arg value="536429627526-cbc02vfg4p18ltdsg4lo1ljlbg947hcd.apps.googleusercontent.com" />
	</beans:bean>
	<beans:bean id="googleClientSecret" class="java.lang.String">
		<beans:constructor-arg value="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" />
	</beans:bean>
	<beans:bean id="googleRedirectUrl" class="java.lang.String">
		<beans:constructor-arg value="http://localhost:8080/login/oauth2/google/callback" />
	</beans:bean>

	<beans:bean id="googleSns" class="doongsil.com.web.account.oauth2.SnsValue">
		<beans:constructor-arg value="google" />
		<beans:constructor-arg ref="googleClientID" />
		<beans:constructor-arg ref="googleClientSecret" />
		<beans:constructor-arg ref="googleRedirectUrl" />
	</beans:bean>
	
	<beans:bean id="googleConnectionFactory" class="org.springframework.social.google.connect.GoogleConnectionFactory">
		<beans:constructor-arg ref="googleClientID" />
		<beans:constructor-arg ref="googleClientSecret" />
	</beans:bean>
	    
	<beans:bean id="googleOAuth2Parameters" class="org.springframework.social.oauth2.OAuth2Parameters">
	    <beans:property name="scope" value="https://www.googleapis.com/auth/userinfo.email" />
	    <!-- <beans:property name="scope" value="https://www.googleapis.com/auth/plus.login" /> -->
	    <beans:property name="redirectUri" ref="googleRedirectUrl" />
	</beans:bean>	
	
</beans:beans>
